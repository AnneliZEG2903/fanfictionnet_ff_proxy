diff --git a/fanficfare/adapters/adapter_fanfictionnet.py b/fanficfare/adapters/adapter_fanfictionnet.py
index 765b6ee4..53348d21 100644
--- a/fanficfare/adapters/adapter_fanfictionnet.py
+++ b/fanficfare/adapters/adapter_fanfictionnet.py
@@ -79,10 +79,41 @@ class FanFictionNetSiteAdapter(BaseSiteAdapter):
         ## ffnet(and, I assume, fpcom) tends to fail more if hit too
         ## fast.  This is in additional to what ever the
         ## slow_down_sleep_time setting is.
-        return BaseSiteAdapter._fetchUrl(self,url,
-                                         parameters=parameters,
-                                         extrasleep=extrasleep,
-                                         usecache=usecache)
+        #return BaseSiteAdapter._fetchUrl(self,url,
+        #                                 parameters=parameters,
+        #                                 extrasleep=extrasleep,
+        #                                 usecache=usecache)
+        #FIXME: Find a way to do this better
+        import socket
+        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+        s.connect(("127.0.0.1", 8888))
+        logger.debug('Sending URL to socket')
+        sent = s.sendall(url.encode('utf-8'))
+        if sent == 0:
+            logging.debug('Connection lost during sending')
+
+        header = s.recv(16)
+        size_expected = int(header.decode('utf-8'))
+        logger.debug('Expecting %i bytes', size_expected)
+
+        chunks = []
+        bytes_recd = 0
+
+        while bytes_recd < size_expected:
+            chunk = s.recv(4096)
+            logger.debug('Receiving %i bytes from socket', bytes_recd)
+            if chunk == b'':
+                logging.debug('Connection closed by remote host')
+                break
+            chunks.append(chunk)
+            bytes_recd = bytes_recd + len(chunk)
+        logger.debug('Closing connection')
+
+        s.close()
+
+        html_code = b''.join(chunks).decode("utf-8")
+        #logger.debug('Received HTML code: %s', html_code)
+        return html_code
 
     def use_pagecache(self):
         '''
