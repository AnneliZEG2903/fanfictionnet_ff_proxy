diff --git a/fanficfare/nsapa_proxy.py b/fanficfare/nsapa_proxy.py
index 3a179d7e..8f08eaf2 100644
--- a/fanficfare/nsapa_proxy.py
+++ b/fanficfare/nsapa_proxy.py
@@ -15,10 +15,12 @@
 # limitations under the License.
 #
 
+import base64
 import time
 import logging
 logger = logging.getLogger(__name__)
 
+from . import exceptions
 from .fetcher import RequestsFetcher, FetcherResponse, make_log
 
 import socket
@@ -26,9 +28,10 @@ class NSAPA_ProxyFetcher(RequestsFetcher):
     def __init__(self,getConfig_fn,getConfigList_fn):
         super(NSAPA_ProxyFetcher,self).__init__(getConfig_fn,getConfigList_fn)
 
-    def proxy_request(self,url):
+    def proxy_request(self,url,timeout=5):
         s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
         s.setblocking(True)
+        s.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
         s.connect((self.getConfig("nsapa_proxy_address","127.0.0.1"),
                    int(self.getConfig("nsapa_proxy_port",8888))))
         #logger.debug('Sending URL to socket')
@@ -36,42 +39,70 @@ class NSAPA_ProxyFetcher(RequestsFetcher):
         if sent == 0:
             logging.debug('Connection lost during sending')
 
-        header_raw = s.recv(4096)
+        header_raw = s.recv(1024)
         header = header_raw.split(b'$END_OF_HEADER$')[0].decode('utf-8')
         size_expected = int(header.split('||')[0])
         type_expected = header.split('||')[1]
         logger.debug('Expecting %i bytes of %s', size_expected, type_expected)
 
-        chunks = []
+
         bytes_recd = 0
 
-        while bytes_recd <= size_expected:
-            chunk = s.recv(4096)
-            #logger.debug('Receiving %i bytes from socket', bytes_recd)
-            #if len(chunk.split(b'$END_OF_HEADER$')) > 1:
-                # We have part of the header in our chunk!
-                #chunk = chunk.split(b'$END_OF_HEADER$')[1]
-            if chunk == b'':
-                logging.debug('connection closed by remote host')
+        #Based on code from https://code.activestate.com/recipes/408859/
+        #Licenced under PSF by John Nielsen
+        s.setblocking(False)
+        total_data=[];data='';begin=time.time()
+        while True:
+            # We received everything we expected
+            if bytes_recd == size_expected:
+                logger.debug('exiting receive loop after %i bytes', bytes_recd)
+                break
+            #if you got some data, then break after wait sec
+            if total_data and time.time()-begin>timeout:
+                logger.debug("timeout while receiving data")
+                break
+            #if you got no data at all, wait a little longer
+            elif time.time()-begin>timeout*2:
+                logger.debug("socket timeout (%i seconds)", timeout)
                 break
-            chunks.append(chunk)
-            bytes_recd = bytes_recd + len(chunk)
-        logger.debug('closing connection after %i bytes', bytes_recd)
+            try:
+                data=s.recv(8192)
+                if data:
+                    total_data.append(data)
+                    bytes_recd += len(data)
+                    begin=time.time()
+                else:
+                    time.sleep(0.1)
+            except:
+                pass
+        #End of Code from https://code.activestate.com/recipes/408859/
+        logger.debug('leaving receiving loop after %i bytes', bytes_recd)
 
         s.close()
+        
+        if bytes_recd != size_expected:
+            # Truncated reply, log the issue
+            logger.error('truncated reply from proxy! Expected %i bytes, received %i! ' % (size_expected, bytes_recd))
+            raise exceptions.FailedToDownload('nsapa_proxy: truncated reply from proxy')
 
         if type_expected == 'text':
-            content = b''.join(chunks).decode("utf-8")
+            content = b''.join(total_data).decode("utf-8")
+
+        if type_expected == 'text-b64':
+            content = b''.join(total_data).decode("utf-8")
+            try:
+                content = base64.standard_b64decode(content)
+            except binascii.Error:
+                raise exceptions.FailedToDownload('nsapa_proxy: base64 decoding failed')
 
         if type_expected == 'image':
-            content = b''.join(chunks)
+            content = b''.join(total_data)
             #logger.debug('Got %i bytes of image', len(content))
 
         if type_expected == 'binary':
             raise NotImplementedError()
 
-        # return (type,expected_size,received_size,content_as_bytes)
-        return (type_expected,size_expected,bytes_recd,content)
+        return (type_expected,content)
 
     def request(self,method,url,headers=None,parameters=None):
         if method != 'GET':
@@ -79,28 +110,34 @@ class NSAPA_ProxyFetcher(RequestsFetcher):
 
         logger.debug(make_log('NSAPA_ProxyFetcher',method,url,hit='REQ',bar='-'))
         content = b'initial_data'
-        retry_count = 0
+        retry_count = 0;timeout=5
         while (retry_count < 5): #FIXME: make the retry counter configurable
-            (type_expected,size_expected,received_size,content) = self.proxy_request(url)
-
-            if received_size == size_expected:
-                # Everything normal
-                retry_count = 0
+            try:
+                (type_expected,content) = self.proxy_request(url,timeout)
+                # Everything is fine, escape the retry loop
+                retry_count = 6
                 break
 
-            # Truncated reply, log the issue
-            logger.error('truncated reply from proxy! Expected %i bytes, received %i! ' % (size_expected, received_size))
+            except exceptions.FailedToDownload:
+                logger.debug('resetting the browser state')
+                self.proxy_request('chrome://version') # Loading a very simple website seem to 'fix' this
+                logger.debug('waiting 5 seconds to let the browser settle')
+                time.sleep(5)
 
-            logger.debug('resetting the browser state')
-            self.proxy_request('http://www.example.com') # Loading a very simple website seem to 'fix' this
-            logger.debug('waiting 5 seconds to let the browser settle')
-            time.sleep(5)
+            except NotImplementedError:
+                raise NotImplementedError()
+
+            finally:
+                retry_count += 1
+                timeout = retry_count * 5
+                logger.debug("setting timeout to %i seconds", timeout)
+                #Needed to catch the raise
+                continue
 
-            retry_count += 1
 
         if retry_count == 5:
             # We exited the retry loop without any valid content,
-            raise exceptions.FailedToDownload('nsapa_proxy: truncated reply from proxy')
+            raise exceptions.FailedToDownload('nsapa_proxy: truncated reply from proxy after %i retry' % retry_count)
 
         return FetcherResponse(content,
                                    url,
